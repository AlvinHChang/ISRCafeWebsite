{"version":3,"sources":["afrocalebCrop.png","config.js","CafeTitle/CafeTitle.js","CafeContainer/CafeContainer.js","App.js","serviceWorker.js","index.js","PetrolIcon.png"],"names":["module","exports","__webpack_require__","p","config","apiKey","discoveryDocs","spreadsheetId","spreadsheetRange","CafeTitle","_this$props","this","props","orders","refreshTime","react_default","a","createElement","className","es","map","cafe","orderItem","drink","orderName","name","isReady","key","time","src","petrolIcon","alt","React","Component","load","callback","window","gapi","client","sheets","spreadsheets","values","get","range","then","response","console","log","result","order","hasReceived","error","CafeContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","refreshInterval","initClient","init","onLoad","data","setState","tick","state","intervalHandle","setInterval","_this$state","src_CafeTitle_CafeTitle","App","src_CafeContainer_CafeContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38fab796.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/afrocalebCrop.84f9f08b.png\";","export default {\n  apiKey: \"AIzaSyBSRyjqGht9DZIMlhjip8jPJFPQJmzdmxc\",\n  discoveryDocs:\n    [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n  spreadsheetId: \"1LC-ZQXFZdf3rad0CVvmN0oL5bfmP2GZEhR-UN4MuN8o\",\n  // the range to grab information\n  spreadsheetRange: \"OrderStatus!A3:E\",\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport QueueAnim from 'rc-queue-anim';\nimport afroCaleb from '../afrocalebCrop.png';\nimport petrolIcon from '../PetrolIcon.png';\nimport './CafeTitle.css';\n\nclass CafeTitle extends React.Component {\n    render(){\n        const {orders, refreshTime} = this.props;\n        return (\n            <div className=\"flex-box\">\n                <div className=\"pending-container\">\n                    <div className=\"title\">\n                    Pending\n                    </div>\n                    <QueueAnim>\n                        {orders.map((cafe) => {\n                                const orderItem = cafe.drink;\n                                const orderName = cafe.name;\n                                return(\n                                    cafe.isReady? null :\n                                        <li key={cafe.time + \"pend\"} className=\"cafe-order pending\">\n                                            <div className=\"order-item\">\n                                                {orderItem}\n                                            </div>\n                                            <div className=\"order-name\">\n                                                {orderName}\n                                            </div>\n                                        </li>)\n                            }\n                        )}\n                    </QueueAnim>\n                </div>\n                <div className=\"cafe-container\">\n                    <div>\n                        <h2 className=\"welcome\">Welcome to </h2>\n                        <h1 className=\"petrol\">Petrol Caf√© </h1>\n                    </div>\n                    <img src={petrolIcon} className=\"afro-caleb\" alt={\"AfroCaleb\"}/>\n                    <div className=\"timer-container\">\n                        Drink status will refresh in {refreshTime} seconds\n                    </div>\n                </div>\n                <div className=\"ready-container\">\n                    <div className=\"title\">\n                    Ready\n                    </div>\n                    <QueueAnim>\n                        {orders.map((cafe) => {\n                            const orderItem = cafe.drink;\n                            const orderName = cafe.name;\n                                return(\n                                    cafe.isReady?\n                                        <li key={cafe.time + \"ready\"} className=\"cafe-order ready\">\n                                            <div className=\"order-item\">\n                                                {orderItem}\n                                            </div>\n                                            <div className=\"order-name\">\n                                                {orderName}\n                                            </div>\n                                        </li> : null)\n                            }\n                        )}\n                    </QueueAnim>\n                </div>\n            </div>)\n    }\n\n}\nCafeTitle.propTypes = {\n    refreshTime: PropTypes.number,\n    orders: PropTypes.array\n};\n\nexport default CafeTitle;\n","import React from 'react';\nimport config from '../config';\nimport CafeTitle from '../CafeTitle/CafeTitle';\n\nclass CafeContainer extends React.Component{\n    refreshInterval = 8;\n    constructor(props){\n        super(props);\n        this.state = {\n            orders: [],\n            error: null,\n            refreshTime: this.refreshInterval\n        };\n        this.intervalHandle = setInterval(this.tick, 1000);\n    }\n    componentDidMount() {\n        // 1. Load the JavaScript client library.\n        window.gapi.load(\"client\", this.initClient);\n    }\n    initClient = () => {\n        // 2. Initialize the JavaScript client library.\n        window.gapi.client\n            .init({\n                apiKey: config.apiKey,\n                // Your API key will be automatically added to the Discovery Document URLs.\n                discoveryDocs: config.discoveryDocs\n            })\n            .then(() => {\n                // 3. Initialize and make the API request.\n                load(this.onLoad);\n            });\n    };\n    onLoad = (data, error) => {\n        if (data) {\n            const orders = data.orders;\n            this.setState({ orders });\n        } else {\n            this.setState({ error });\n        }\n    };\n\n    tick = () => {\n        // runs every time a tick is called\n        let refreshTime = this.state.refreshTime - 1;\n        if (refreshTime <= 0) {\n            refreshTime = this.refreshInterval;\n            load(this.onLoad);\n        }\n        this.setState({refreshTime})\n\n    };\n    render() {\n        const {error, orders, refreshTime} = this.state;\n        if (error) {\n            console.log(error);\n        }\n        return (\n            <CafeTitle orders={orders} refreshTime={refreshTime} />\n        );\n    }\n}\n\n\nexport function load(callback) {\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\n    window.gapi.client.sheets.spreadsheets.values\n      .get({\n          spreadsheetId: config.spreadsheetId,\n          // Modify according to correct sheet information\n          range: config.spreadsheetRange\n      })\n      .then(\n        response => {\n            console.log(response);\n          const data = response.result.values || [];\n          const orders = data.map(order => ({\n              time: order[0],\n              name: order[1],\n              drink: order[2],\n              isReady: (order[3] === 'TRUE'),\n              hasReceived: (order[4] === 'TRUE'),\n\n          })) || [];\n          callback({\n            orders\n          });\n        },\n        response => {\n          callback(false, response.result.error);\n        }\n      );\n  });\n}\n\nexport default CafeContainer;","import React, { Component } from 'react';\nimport CafeContainer from './CafeContainer/CafeContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <CafeContainer/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/PetrolIcon.bb5d1da3.png\";"],"sourceRoot":""}